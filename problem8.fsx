let number = 
    "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004742166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091888458015616609791913387549920052406368991256071760646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

let product (str:string) :bigint =
    str.ToCharArray() |> Seq.map (fun x -> bigint (int x - int '0')) |> Seq.fold (*) 1I

let largestAdjacentProduct size (str:string) = 
    [0..(str.Length-size)]
    |> Seq.map ((fun x -> number.Substring(x, size)) >> product)
    |> Seq.max 

printfn "%A" (largestAdjacentProduct 13 number)
